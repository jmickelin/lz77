IMPLEMENTATION
    Decompressor_i
REFINES
    Decompressor

SEES
    DecompConstants,
    Strings

VALUES
    decomp_max_waiting = 256
    
CONCRETE_VARIABLES
    decomp_output_buffer,
    decomp_output_buffer_read,
    decomp_output_buffer_end,
    decomp_window,
    decomp_window_index,
    decomp_window_wrapped,
    decomp_error_occurred

INVARIANT
    decomp_output_buffer:      (1..decomp_max_waiting) --> 0..255 &
    decomp_output_buffer_end:   0..decomp_max_waiting &
    decomp_output_buffer_read:  0..decomp_max_waiting &
    decomp_window:             (0..max_pointer - 1) --> 0..255 &
    decomp_window_index:        0..(max_pointer - 1) &
    decomp_window_wrapped:     BOOL &

/*    decomp_output_buffer \|/ decomp_output_buffer_end = 
        % ii . (ii : dom(decomp_output_buffer \|/ decomp_output_buffer_end) | 
                  (decomp_output \|/ decomp_written_index)(ii + 1)) &
*/
    ! ii . (ii : (1..decomp_output_buffer_end) =>
        decomp_output_buffer(ii) = decomp_output(size(decomp_output) - decomp_output_buffer_end + ii)) &

    /* The beginning (most previously written part) of the window should always be equal to the end of decomp_output */
    ! ii . (ii : (0..decomp_window_index - 1) => 
        decomp_window(ii) = decomp_output((size(decomp_output) - decomp_window_index + 1) + ii)) &
    /* If the window has wrapped, the end of the window should be equal to what comes before that */
    (decomp_window_wrapped = TRUE => 
         ! ii . (ii : (decomp_window_index..max_pointer - 1) =>
             decomp_window(ii) = decomp_output((size(decomp_output) - max_pointer + 1) + ii - decomp_window_index)))
    
INITIALISATION
    decomp_output_buffer := (1..decomp_max_waiting) * {0};
    decomp_output_buffer_end := 0;
    decomp_output_buffer_read := 0;
    decomp_window := (0..max_pointer - 1) * {0};
    decomp_window_index := 0;
    decomp_error_occurred := FALSE;
    decomp_window_wrapped := FALSE

OPERATIONS
    decomp_put_atom(tag, pp, ll, qqlen, qq) = BEGIN
       decomp_output_buffer_read := 0;
    
       IF (tag = Lit)
       THEN
           VAR xx IN
               xx := decomp_window_index + qqlen;
               decomp_window_wrapped := bool((xx >= max_pointer) 
                                             or decomp_window_wrapped = TRUE)
           END;
               
           VAR ii IN
               ii := 1;
               
               WHILE ii <= qqlen
               DO decomp_output_buffer(ii) := qq(ii);
                  decomp_window(decomp_window_index + ii - 1) := qq(ii);
                  decomp_window_index := (decomp_window_index + 1) mod max_pointer;
                  ii := ii + 1
               INVARIANT (1 = 1)
               VARIANT qqlen - ii
               END
           END;
           decomp_output_buffer_end := qqlen

        ELSE /* tag = Ref */
           IF decomp_window_wrapped = FALSE & decomp_window_index < pp
           THEN
              /* Invalid reference */
              decomp_error_occurred := TRUE
           ELSE
               VAR xx IN
                   xx := decomp_window_index + ll;
                   decomp_window_wrapped := bool((xx >= max_pointer) 
                                                 or decomp_window_wrapped = TRUE)
               END;
               
               VAR ii IN
                   ii := 1;
                   
                   WHILE ii <= ll
                   DO decomp_output_buffer(ii) := decomp_window((decomp_window_index + ii - pp) mod max_pointer);
                      decomp_window(decomp_window_index + ii - 1) := 
                              decomp_window((decomp_window_index + ii - pp) mod max_pointer);
                      ii := ii + 1
                   INVARIANT (1 = 1)
                   VARIANT ll - ii
                   END
               END;
               decomp_window_index := (decomp_window_index + ll) mod max_pointer;
               decomp_output_buffer_end := ll
           END
       END
   END;
   tt <-- decomp_ready = tt := bool(decomp_output_buffer_read < decomp_output_buffer_end);
   tt <-- decomp_error_status = tt := decomp_error_occurred;
   bb <-- decomp_read_byte = 
       BEGIN
           bb := decomp_output_buffer(decomp_output_buffer_read + 1);
           decomp_output_buffer_read := decomp_output_buffer_read + 1
       END
END
