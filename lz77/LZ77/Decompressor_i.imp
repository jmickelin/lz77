IMPLEMENTATION
    Decompressor_i
REFINES
    Decompressor

SEES
    DecompConstants,
    Strings

VALUES
    decomp_max_waiting = 256
    
CONCRETE_VARIABLES
    decomp_output_buffer,
    decomp_output_buffer_read,
    decomp_output_buffer_end,
    decomp_window,
    decomp_window_index,
    decomp_window_remaining,
    decomp_error_occurred

DEFINITIONS
    arrayToSeq(aa, ii, jj) == % nn . (nn : (1..((jj) - (ii)) + 1) | (aa)((ii) + nn - 1)) 

INVARIANT
    decomp_output_buffer:      (0..decomp_max_waiting) --> 0..255 &
    decomp_output_buffer_end:   0..decomp_max_waiting &
    decomp_output_buffer_read:  0..decomp_max_waiting &
    decomp_window:             (0..255) --> 0..255 & // (0..max_pointer - 1) --> 0..255
    decomp_window_index:        0..255 & // (0..max_pointer - 1)
    decomp_window_remaining:    0..256 & // (0..max_pointer)

    (decomp_window_remaining = 0 <=> size(decomp_output) >= max_pointer) &

    ((1..decomp_max_waiting) <| decomp_output_buffer) /|\ decomp_output_buffer_end = 
            decomp_output \|/ (size(decomp_output) - decomp_output_buffer_end) &

    size(decomp_output) - decomp_written_index = decomp_output_buffer_end - decomp_output_buffer_read &

    decomp_output_buffer_read <= decomp_output_buffer_end &

    arrayToSeq(decomp_window, decomp_window_index + decomp_window_remaining, 256 - 1) ^
        arrayToSeq(decomp_window, 0, decomp_window_index - 1) =
                decomp_output \|/ (size(decomp_output) + 1 - (256 - decomp_window_remaining))

INITIALISATION
    decomp_output_buffer := (0..decomp_max_waiting) * {0};
    decomp_output_buffer_end := 0;
    decomp_output_buffer_read := 0;
    decomp_window := (0..255) * {0}; // (0..max_pointer - 1) * {0}
    decomp_window_index := 0;
    decomp_error_occurred := FALSE;
    decomp_window_remaining := 256   // max_pointer

OPERATIONS
    decomp_put_atom(tag, pp, ll, qqlen, qq) = BEGIN    
       IF (tag = Lit)
       THEN
           VAR ii IN
               ii := 1;
               
               WHILE ii <= qqlen
               DO decomp_output_buffer(ii) := qq(ii);
                  decomp_window((decomp_window_index + ii - 1) mod 256) := qq(ii); // mod max_pointer
                  IF decomp_window_remaining /= 0 THEN
                      decomp_window_remaining := decomp_window_remaining - 1
                  END;
                  ii := ii + 1
               INVARIANT
                   ii: NAT &
                   1 <= ii &
                   ii <= qqlen + 1 &
                   decomp_output_buffer:      (0..decomp_max_waiting) --> 0..255 &
                   decomp_window:             (0..255) --> 0..255 & // (0..max_pointer - 1) --> 0..255
                   decomp_window_index:       NAT &
                   decomp_window_remaining:   0..256 &  // 0..max_pointer
                   
                   ((1..decomp_max_waiting) <| decomp_output_buffer)/|\(ii-1) = (1..ii-1) <| qq &
                   
                   arrayToSeq(decomp_window,
                              ((decomp_window_index + (ii - 1)) mod 256) + decomp_window_remaining, // mod max_pointer
                              256 - 1) // max_pointer - 1
                   ^ arrayToSeq(decomp_window, 
                                0, 
                                (decomp_window_index - 1 + (ii - 1)) mod 256)  // mod max_pointer
                   = (decomp_output 
                           ^ (qq /|\ (ii-1)))
                           \|/ (size(decomp_output) + 1 - (256 - decomp_window_remaining)) // max_pointer - decomp-window_remaining
               VARIANT qqlen + 1 - ii
               END
           END;
           decomp_window_index := (decomp_window_index + qqlen) mod 256; // mod max_pointer
           decomp_output_buffer_end := qqlen

        ELSE /* tag = Ref */
           IF decomp_window_remaining /= 0 & decomp_window_index < pp
           THEN
              /* Invalid reference */
              decomp_error_occurred := TRUE
           ELSE
               VAR ii IN
                   ii := 1;
                   
                   WHILE ii <= ll
                   DO decomp_output_buffer(ii) := decomp_window((decomp_window_index + (ii - 1) - pp) mod 256);
                      decomp_window((decomp_window_index + ii - 1) mod 256) := 
                              decomp_window((decomp_window_index + (ii - 1) - pp) mod 256);
                      IF decomp_window_remaining /= 0 THEN
                          decomp_window_remaining := decomp_window_remaining - 1
                      END;
                      ii := ii + 1
                   INVARIANT
                       ii: NAT &
                       1 <= ii &
                       ii <= ll + 1 &
                       decomp_output_buffer: (0..decomp_max_waiting) --> 0..255 &
                       decomp_window: (0..255) --> 0..255 &
                       decomp_window_index:       NAT &
                       decomp_window_remaining:   0..256 & // 0..max_pointer

                       ((1..decomp_max_waiting) <| decomp_output_buffer)/|\(ii-1) = 
                               (1..ii-1) <| (%nn . (nn : 1..ll | decomp_output(size(decomp_output) + 1 - pp + ((nn - 1) mod pp)))) &

                       arrayToSeq(decomp_window,
                                  ((decomp_window_index + (ii - 1)) mod 256) + decomp_window_remaining, // mod max_pointer
                                  256 - 1) // max_pointer - 1
                       ^ arrayToSeq(decomp_window, 
                                    0, 
                                    (decomp_window_index - 1 + (ii - 1)) mod 256)  // mod max_pointer
                       = (decomp_output 
                               ^ ((%nn . (nn : 1..ll | decomp_output(size(decomp_output) + 1 - pp + ((nn - 1) mod pp)))) /|\ (ii-1)))
                               \|/ (size(decomp_output) + 1 - (256 - decomp_window_remaining)) // max_pointer - decomp-window_remaining
                   VARIANT ll + 1 - ii
                   END
               END;
               decomp_window_index := (decomp_window_index + ll) mod 256;
               decomp_output_buffer_end := ll
           END
       END;
       decomp_output_buffer_read := 0
   END;
   tt <-- decomp_ready = tt := bool(decomp_output_buffer_read < decomp_output_buffer_end);
   tt <-- decomp_error_status = tt := decomp_error_occurred;
   bb <-- decomp_read_byte = 
       BEGIN
           bb := decomp_output_buffer(decomp_output_buffer_read + 1);
           decomp_output_buffer_read := decomp_output_buffer_read + 1
       END
END
